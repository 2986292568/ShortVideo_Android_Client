package com.wanyi.uiframe.persistence;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wanyi.uiframe.persistence.entity.HistoryMovieDataDo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_MOVIE_DATA_DO".
*/
public class HistoryMovieDataDoDao extends AbstractDao<HistoryMovieDataDo, Long> {

    public static final String TABLENAME = "HISTORY_MOVIE_DATA_DO";

    /**
     * Properties of entity HistoryMovieDataDo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WatchNum = new Property(1, String.class, "watchNum", false, "WATCH_NUM");
        public final static Property LoveNum = new Property(2, String.class, "loveNum", false, "LOVE_NUM");
        public final static Property CollectNum = new Property(3, String.class, "collectNum", false, "COLLECT_NUM");
        public final static Property Width = new Property(4, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(5, Integer.class, "height", false, "HEIGHT");
        public final static Property MovideDesc = new Property(6, String.class, "movideDesc", false, "MOVIDE_DESC");
        public final static Property VideoKey = new Property(7, String.class, "videoKey", false, "VIDEO_KEY");
        public final static Property Video_commentnum = new Property(8, String.class, "video_commentnum", false, "VIDEO_COMMENTNUM");
        public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
        public final static Property Author = new Property(10, String.class, "author", false, "AUTHOR");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property MovieUri = new Property(12, String.class, "movieUri", false, "MOVIE_URI");
        public final static Property Hlsurl = new Property(13, String.class, "hlsurl", false, "HLSURL");
        public final static Property PlaceImage = new Property(14, String.class, "placeImage", false, "PLACE_IMAGE");
        public final static Property IsVip = new Property(15, Boolean.class, "isVip", false, "IS_VIP");
    }


    public HistoryMovieDataDoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryMovieDataDoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_MOVIE_DATA_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WATCH_NUM\" TEXT," + // 1: watchNum
                "\"LOVE_NUM\" TEXT," + // 2: loveNum
                "\"COLLECT_NUM\" TEXT," + // 3: collectNum
                "\"WIDTH\" INTEGER," + // 4: width
                "\"HEIGHT\" INTEGER," + // 5: height
                "\"MOVIDE_DESC\" TEXT," + // 6: movideDesc
                "\"VIDEO_KEY\" TEXT UNIQUE ," + // 7: videoKey
                "\"VIDEO_COMMENTNUM\" TEXT," + // 8: video_commentnum
                "\"AVATAR\" TEXT," + // 9: avatar
                "\"AUTHOR\" TEXT," + // 10: author
                "\"TITLE\" TEXT," + // 11: title
                "\"MOVIE_URI\" TEXT," + // 12: movieUri
                "\"HLSURL\" TEXT," + // 13: hlsurl
                "\"PLACE_IMAGE\" TEXT," + // 14: placeImage
                "\"IS_VIP\" INTEGER);"); // 15: isVip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_MOVIE_DATA_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryMovieDataDo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String watchNum = entity.getWatchNum();
        if (watchNum != null) {
            stmt.bindString(2, watchNum);
        }
 
        String loveNum = entity.getLoveNum();
        if (loveNum != null) {
            stmt.bindString(3, loveNum);
        }
 
        String collectNum = entity.getCollectNum();
        if (collectNum != null) {
            stmt.bindString(4, collectNum);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(5, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        String movideDesc = entity.getMovideDesc();
        if (movideDesc != null) {
            stmt.bindString(7, movideDesc);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(8, videoKey);
        }
 
        String video_commentnum = entity.getVideo_commentnum();
        if (video_commentnum != null) {
            stmt.bindString(9, video_commentnum);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(11, author);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String movieUri = entity.getMovieUri();
        if (movieUri != null) {
            stmt.bindString(13, movieUri);
        }
 
        String hlsurl = entity.getHlsurl();
        if (hlsurl != null) {
            stmt.bindString(14, hlsurl);
        }
 
        String placeImage = entity.getPlaceImage();
        if (placeImage != null) {
            stmt.bindString(15, placeImage);
        }
 
        Boolean isVip = entity.getIsVip();
        if (isVip != null) {
            stmt.bindLong(16, isVip ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryMovieDataDo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String watchNum = entity.getWatchNum();
        if (watchNum != null) {
            stmt.bindString(2, watchNum);
        }
 
        String loveNum = entity.getLoveNum();
        if (loveNum != null) {
            stmt.bindString(3, loveNum);
        }
 
        String collectNum = entity.getCollectNum();
        if (collectNum != null) {
            stmt.bindString(4, collectNum);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(5, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        String movideDesc = entity.getMovideDesc();
        if (movideDesc != null) {
            stmt.bindString(7, movideDesc);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(8, videoKey);
        }
 
        String video_commentnum = entity.getVideo_commentnum();
        if (video_commentnum != null) {
            stmt.bindString(9, video_commentnum);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(11, author);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String movieUri = entity.getMovieUri();
        if (movieUri != null) {
            stmt.bindString(13, movieUri);
        }
 
        String hlsurl = entity.getHlsurl();
        if (hlsurl != null) {
            stmt.bindString(14, hlsurl);
        }
 
        String placeImage = entity.getPlaceImage();
        if (placeImage != null) {
            stmt.bindString(15, placeImage);
        }
 
        Boolean isVip = entity.getIsVip();
        if (isVip != null) {
            stmt.bindLong(16, isVip ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryMovieDataDo readEntity(Cursor cursor, int offset) {
        HistoryMovieDataDo entity = new HistoryMovieDataDo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // watchNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loveNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // collectNum
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // width
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // movideDesc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoKey
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // video_commentnum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // author
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // movieUri
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hlsurl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // placeImage
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // isVip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryMovieDataDo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWatchNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoveNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCollectNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWidth(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMovideDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideo_commentnum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMovieUri(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHlsurl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPlaceImage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsVip(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryMovieDataDo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryMovieDataDo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryMovieDataDo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
