package com.wanyi.uiframe.persistence;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wanyi.uiframe.persistence.entity.LocalMovieDataDo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MOVIE_DATA_DO".
*/
public class LocalMovieDataDoDao extends AbstractDao<LocalMovieDataDo, Long> {

    public static final String TABLENAME = "LOCAL_MOVIE_DATA_DO";

    /**
     * Properties of entity LocalMovieDataDo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoKey = new Property(1, String.class, "videoKey", false, "VIDEO_KEY");
        public final static Property Width = new Property(2, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, Integer.class, "height", false, "HEIGHT");
        public final static Property CoverImage = new Property(4, String.class, "coverImage", false, "COVER_IMAGE");
        public final static Property LocalUrl = new Property(5, String.class, "localUrl", false, "LOCAL_URL");
    }


    public LocalMovieDataDoDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMovieDataDoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MOVIE_DATA_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VIDEO_KEY\" TEXT," + // 1: videoKey
                "\"WIDTH\" INTEGER," + // 2: width
                "\"HEIGHT\" INTEGER," + // 3: height
                "\"COVER_IMAGE\" TEXT," + // 4: coverImage
                "\"LOCAL_URL\" TEXT);"); // 5: localUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MOVIE_DATA_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalMovieDataDo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(2, videoKey);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(5, coverImage);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(6, localUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalMovieDataDo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(2, videoKey);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(5, coverImage);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(6, localUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalMovieDataDo readEntity(Cursor cursor, int offset) {
        LocalMovieDataDo entity = new LocalMovieDataDo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoKey
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // width
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // localUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalMovieDataDo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCoverImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalMovieDataDo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalMovieDataDo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalMovieDataDo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
